{"version":3,"sources":["Hooks/useLocalStorage.js","components/Login.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/Conversations.js","components/Contacts.js","components/NewContactModal.js","components/NewConversationModal.js","components/Sidebar.js","components/OpenConversation.js","components/Dashboard.js","components/Info.js","components/App.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","Group","Label","Control","type","ref","required","Button","onClick","uuidV4","variant","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","transports","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","Conversations","ListGroup","Item","action","active","r","join","Contacts","NewContactModal","closeModal","nameRef","Fragment","Modal","Header","closeButton","Body","NewConversationModal","selectedContactIds","setSelectedContactIds","console","log","window","alert","controlId","Check","includes","label","onChange","contactId","oldSelectedContactIds","filter","prevId","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","conversationsOpen","width","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","InputGroup","as","target","resize","Append","Dashboard","Info","App","setId","open","isOpen","dashboard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c330d1d.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\n//unique key for localstorage\r\nconst PREFIX = \"gapshap-app-\";\r\n\r\nexport default function useLocalStorage(key,initialValue) {\r\n  const prefixedKey = PREFIX + key;\r\n  \r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n    //if we are accessing a stored fun then inkove it.\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue() //\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue];\r\n\r\n}\r\n","import React, { useRef } from 'react'\r\nimport { Container, Form, Button } from 'react-bootstrap'\r\nimport { v4 as uuidV4 } from 'uuid'\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n  const idRef = useRef()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    onIdSubmit(idRef.current.value)\r\n  }\r\n\r\n  function createNewId() {\r\n    onIdSubmit(uuidV4())\r\n  }\r\n\r\n  return (\r\n    <Container className=\"align-items-center d-flex\" style={{ height: '100vh' }}>\r\n      <Form onSubmit={handleSubmit} className=\"w-100\">\r\n        <Form.Group>\r\n          <Form.Label>Enter Your Id</Form.Label>\r\n          <Form.Control type=\"text\" ref={idRef} required />\r\n        </Form.Group>   \r\n        <div className=\"mt-2\">\r\n          <Button type=\"submit\" className=\"me-2\">Login</Button>\r\n          <Button onClick={createNewId} variant=\"secondary\">Create A New Id</Button>\r\n        </div>\r\n      \r\n      </Form>\r\n    </Container>\r\n  )\r\n}","import React, { useContext } from 'react'\r\nimport useLocalStorage from '../Hooks/useLocalStorage';\r\n\r\nconst ContactsContext = React.createContext()\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactsContext)\r\n}\r\n\r\nexport function ContactsProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage('contacts', [])\r\n\r\n  function createContact(id, name) {\r\n    setContacts(prevContacts => {\r\n      return [...prevContacts, { id, name }]\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  )\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext()\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext)\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState()\r\n\r\n  useEffect(() => {\r\n    const newSocket = io(\r\n      'http://localhost:5000',\r\n      { query: { id },\r\n        transports : ['websocket'] \r\n      }\r\n    )\r\n    setSocket(newSocket)\r\n\r\n    return () => newSocket.close()\r\n  }, [id])\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n}","import React, { useContext, useState, useEffect, useCallback } from 'react'\r\nimport useLocalStorage from '../Hooks/useLocalStorage';\r\nimport { useContacts } from './ContactsProvider';\r\nimport { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n\r\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n  \r\n  const { contacts } = useContacts()\r\n  const socket = useSocket()\r\n\r\n  //add the conversation\r\n  function createConversation(recipients) {\r\n    setConversations(prevConversations => {\r\n      return [...prevConversations, { recipients, messages: [] }]\r\n    })\r\n  }\r\n\r\n  //useCallback for rerendering the messages\r\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\r\n    setConversations(prevConversations => {\r\n      let madeChange = false\r\n      const newMessage = { sender, text }\r\n      const newConversations = prevConversations.map(conversation => {\r\n        if (arrayEquality(conversation.recipients, recipients)) {\r\n          madeChange = true\r\n          return {\r\n            ...conversation,\r\n            messages: [...conversation.messages, newMessage]\r\n          }\r\n        }\r\n\r\n        return conversation\r\n      })\r\n\r\n      if (madeChange) {\r\n        return newConversations\r\n      } else {\r\n        return [\r\n          ...prevConversations,\r\n          { recipients, messages: [newMessage] }\r\n        ]\r\n      }\r\n    })\r\n  }, [setConversations])\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('receive-message')\r\n  }, [socket, addMessageToConversation])\r\n\r\n  function sendMessage(recipients, text) {\r\n    socket.emit('send-message', { recipients, text })\r\n\r\n    addMessageToConversation({ recipients, text, sender: id })\r\n  }\r\n  //here for every msg we take every user and map them\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n\r\n    const recipients = conversation.recipients.map(recipient => {\r\n      \r\n      const contact = contacts.find(contact => {\r\n        return (contact.id === recipient)\r\n      })\r\n      \r\n      const name = (contact && contact.name) || recipient\r\n      //id as recipient\r\n      return { id: recipient, name }\r\n    })\r\n\r\n    const messages = conversation.messages.map(message => {\r\n      \r\n      const contact = contacts.find(contact => {\r\n        return contact.id === message.sender\r\n      })\r\n\r\n      const name = (contact && contact.name) || message.sender\r\n      const fromMe = id === message.sender\r\n      return { ...message, senderName: name, fromMe }\r\n    \r\n    })\r\n    \r\n    const selected = index === selectedConversationIndex\r\n    return { ...conversation, messages, recipients, selected }\r\n  })\r\n\r\n  \r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false\r\n\r\n  a.sort()\r\n  b.sort()\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index]\r\n  })\r\n}","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function Conversations() {\r\n  const { conversations, selectConversationIndex } = useConversations()\r\n\r\n  return (\r\n    <ListGroup variant=\"flush\">\r\n      {conversations.map((conversation, index) => (\r\n        <ListGroup.Item\r\n          key={index}\r\n          action\r\n          onClick={() => selectConversationIndex(index)}\r\n          active={conversation.selected}\r\n        >\r\n          {conversation.recipients.map(r => r.name).join(', ')}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\n\r\nexport default function Contacts() {\r\n  const { contacts } = useContacts()\r\n\r\n  return (\r\n    <ListGroup variant=\"flush\">\r\n      {contacts.map(contact => (\r\n        <ListGroup.Item key={contact.id} className='bg-light'>\r\n          {contact.name}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}","import React, { useRef } from 'react'\r\nimport { Modal, Form, Button } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\n\r\nexport default function NewContactModal({ closeModal }) {\r\n  const idRef = useRef()\r\n  const nameRef = useRef()\r\n  const { createContact } = useContacts();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    createContact(idRef.current.value, nameRef.current.value);\r\n    closeModal()\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Modal.Header closeButton>Create Contact</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Id</Form.Label>\r\n            <Form.Control type=\"text\" ref={idRef} required />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type=\"text\" ref={nameRef} required />\r\n          </Form.Group>\r\n          <Button type=\"submit\" className='mt-2'>Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </React.Fragment>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport { Modal, Form, Button } from 'react-bootstrap'\r\n\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n  const [selectedContactIds, setSelectedContactIds] = useState([])\r\n  const { contacts } = useContacts()\r\n  const { createConversation } = useConversations()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    console.log(selectedContactIds);\r\n    if(selectedContactIds.length <= 0) {\r\n      window.alert(\"Please add contacts to the chat\")\r\n    }\r\n    else{\r\n      createConversation(selectedContactIds)\r\n    }\r\n    closeModal()\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds(oldSelectedContactIds => {\r\n      if (oldSelectedContactIds.includes(contactId)) {\r\n        return oldSelectedContactIds.filter(prevId => {\r\n          return (contactId !== prevId)\r\n        })\r\n      } else {\r\n        return [...oldSelectedContactIds, contactId]\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          {contacts.map(contact => (\r\n            <Form.Group controlId={contact.id} key={contact.id}>\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                value={selectedContactIds.includes(contact.id)}\r\n                label={contact.name}\r\n                onChange={() => handleCheckboxChange(contact.id)}\r\n              />\r\n            </Form.Group>\r\n          ))}\r\n          <Button type=\"submit\">Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Tab, Nav, Button, Modal } from 'react-bootstrap'\r\nimport Conversations from './Conversations'\r\nimport Contacts from './Contacts'\r\nimport NewContactModal from './NewContactModal'\r\nimport NewConversationModal from './NewConversationModal'\r\n\r\nconst CONVERSATIONS_KEY = 'conversations'\r\nconst CONTACTS_KEY = 'contacts'\r\n\r\nexport default function Sidebar({ id }) {\r\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY)\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const conversationsOpen = (activeKey === CONVERSATIONS_KEY)\r\n  \r\n  function closeModal() {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: '25%' }} className=\"d-flex flex-column\">\r\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n        \r\n        <Nav variant=\"pills\" className=\"justify-content-center\">\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={CONVERSATIONS_KEY}>Conversations</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        \r\n        <Tab.Content className=\"border-end overflow-auto flex-grow-1 mt-3\">\r\n          {/* Flex-grow-1 takes care of scroll for our sidebar */}\r\n          <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n            \r\n            <Conversations />\r\n          \r\n          </Tab.Pane>\r\n          <Tab.Pane eventKey={CONTACTS_KEY}>\r\n            \r\n            <Contacts />\r\n          \r\n          </Tab.Pane>\r\n        </Tab.Content>\r\n\r\n        <div className=\"p-2 border-top border-end small\">\r\n\r\n          <strong>Your Id: </strong>\r\n          <span className=\"text-muted\">{id}</span>\r\n        </div>\r\n\r\n        <Button onClick={() => setModalOpen(true)} className=\"rounded-0 btn-new\">\r\n          New {conversationsOpen ? 'Conversation' : 'Contact'}\r\n        </Button>\r\n\r\n      </Tab.Container>\r\n\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        {conversationsOpen ?\r\n          <NewConversationModal closeModal={closeModal} /> :\r\n          <NewContactModal closeModal={closeModal} />\r\n        }\r\n      </Modal>\r\n    </div>\r\n  )\r\n}","import React, { useState, useCallback } from 'react'\r\nimport { Form, InputGroup, Button } from 'react-bootstrap'\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function OpenConversation() {\r\n  \r\n  const [text, setText] = useState('')\r\n  \r\n  const setRef = useCallback(node => {\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true })\r\n    }\r\n  }, [])\r\n  \r\n  const { sendMessage, selectedConversation } = useConversations()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    sendMessage(\r\n      selectedConversation.recipients.map(r => r.id),\r\n      text\r\n    )\r\n    \r\n    setText('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column flex-grow-1\">\r\n      <div className=\"flex-grow-1 overflow-auto\">\r\n        <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n          {selectedConversation.messages.map((message, index) => {\r\n            const lastMessage = selectedConversation.messages.length - 1 === index\r\n            return (\r\n              <div\r\n                ref={lastMessage ? setRef : null}\r\n                key={index}\r\n                className={`my-2 d-flex flex-column ${message.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`}\r\n              >\r\n                \r\n                <div\r\n                  className={`bg-new rounded px-3 py-2 ${message.fromMe ? ' text-white' : 'border'}`}>\r\n                  {message.text}\r\n                </div>\r\n\r\n                <div className={`text-muted small ${message.fromMe ? 'text-right' : ''}`}>\r\n                  {message.fromMe ? 'You' : message.senderName}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className=\"m-2\">\r\n          <InputGroup>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              required\r\n              value={text}\r\n              onChange={e => setText(e.target.value)}\r\n              style={{ height: '75px', resize: 'none' }}\r\n              className=\"bg-light text-dark\"\r\n            />\r\n            <InputGroup.Append>\r\n              <Button type=\"submit\" className=\"ms-2 send\" >Send</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport Sidebar from './Sidebar';\r\nimport OpenConversation from './OpenConversation';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function Dashboard({ id }) {\r\n  const { selectedConversation } = useConversations()\r\n\r\n  return (\r\n    <div className=\"d-flex\" style={{ height: '100vh' }}>\r\n      <Sidebar id={id} />\r\n      {selectedConversation && <OpenConversation />}\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { Modal } from 'react-bootstrap'\r\nexport default function Info({ closeModal}) {\r\n  return (\r\n    <div>\r\n      <React.Fragment>\r\n      <Modal.Header closeButton>How To Use application</Modal.Header>\r\n      <Modal.Body>\r\n        <ul>\r\n          <li>First Add new Contacts.</li>\r\n          <li>Then You can start a new conversation with the new users.</li>\r\n          <li>You can chat individually or in group as you like.</li>\r\n          <li>Your <strong>ID</strong> is the <i>key</i> for the conversation.</li>\r\n        </ul>\r\n      </Modal.Body>\r\n    </React.Fragment>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\n//custom hooks\nimport useLocalStorage from '../Hooks/useLocalStorage';\n\n//screens\nimport Login from './Login';\nimport Dashboard from './Dashboard';\nimport Info from './Info'\n//context\nimport { ContactsProvider } from '../contexts/ContactsProvider'\nimport { ConversationsProvider } from '../contexts/ConversationsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\n\nimport {Button,Modal} from 'react-bootstrap';\nfunction App() {\n  const [id,setId] = useLocalStorage('id');\n  const [open,isOpen] = React.useState(false);\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  )\n\n  function closeModal(){\n    isOpen(false);\n  }\n  return (\n    <>\n      {id ? dashboard : <Login onIdSubmit={setId} />}\n      <div className='info'>\n        <Button onClick={()=>isOpen(true)} variant=\"warning\" className=\"text-white\">\n          Info\n        </Button>\n\n        <Modal show={open} onHide={closeModal}>\n          <Info closeModal={closeModal}/>\n        </Modal>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}